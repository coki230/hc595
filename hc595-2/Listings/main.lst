C51 COMPILER V9.59.0.0   MAIN                                                              08/29/2018 21:46:13 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX51.H>
   2          #include <INTRINS.H>
   3          // 行扫描
   4          sbit shcp_h=P2^2;
   5          sbit ds_h=P2^1;
   6          sbit shcp=P2^0;
   7          // 列扫描
   8          sbit shcp_l=P2^3;
   9          sbit ds_l=P2^4;
  10          
  11          code int tab[64] = {
  12          /*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/
  13          0x10,0x20,0x10,0x20,0x11,0xFC,0x10,0x20,0xFC,0x20,0x24,0x20,0x27,0xFE,0x24,0x00,
  14          0x24,0x20,0x48,0x20,0x29,0xFC,0x10,0x20,0x28,0x20,0x44,0x20,0x83,0xFE,0x00,0x00,
  15          /*--  文字:  哈  --*/
  16          /*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/
  17          0x00,0x40,0x00,0x40,0x78,0xA0,0x49,0x10,0x4A,0x08,0x4C,0x06,0x4B,0xF8,0x48,0x00,
  18          0x48,0x00,0x4B,0xF8,0x7A,0x08,0x4A,0x08,0x02,0x08,0x02,0x08,0x03,0xF8,0x02,0x08,
  19          };
  20          
  21          /**
  22          **********************************************
  23          ***获取数组内元素的相对位置上的bit值**********
  24          ***clo：扫描列；row：扫描行（从最左面开始扫描）
  25          ***arr：需要取值的数组************************
  26          **********************************************
  27          */
  28          int get_bit(int col, int row, int *arr) {
  29   1        // 数组内到第几个元素
  30   1        int arrIndex;
  31   1        // 元素到第几位
  32   1        int valueBit;
  33   1        int cur, ret;
  34   1        int rowIndex, colIndex;
  35   1          // 默认从0开始，因为行列一般从1开始，所以需要转换，原值减去1
  36   1          col = col - 1;
  37   1          row = row - 1;
  38   1        
  39   1        rowIndex = row % 16;
  40   1        colIndex = col / 8;
  41   1        // 如果colIndex大于1，也就是大于 2 * 8,已经换下一个字了所以需要特殊处理
  42   1        arrIndex = 2 * rowIndex + colIndex / 2 * 32 + colIndex % 2;
  43   1        valueBit = col % 8;
  44   1        // cur = arr[arrIndex + 2 * col];
  45   1        cur = arr[arrIndex];
  46   1      
  47   1        // 把需要到位移动到最右面，然后只取最右面到一位数
  48   1        ret = cur >> (8 - valueBit -1);
  49   1        ret = ret & 0x01;
  50   1        return ret;
  51   1      
  52   1      }
  53          
  54          
C51 COMPILER V9.59.0.0   MAIN                                                              08/29/2018 21:46:13 PAGE 2   

  55          
  56          /**
  57          **********************************************
  58          ***获取一行的扫描数据**********
  59          **********************************************
  60          */
  61          
  62          
  63          /*
  64           * 返回位无符号的long，最多为4个字节，即为：4 * 8
  65           * 
  66           * 
  67           */
  68          unsigned long get_row(int col_offset, int row, int *arr, int arrSize){
  69   1        unsigned long ret = 0;
  70   1        // 显示的LED的长度，三个LED，每个8位
  71   1        int ledLen = 3 * 8;
  72   1        int arrLen = arrSize * 8;
  73   1        int col_scan = 1;
  74   1        int col_start, col_end;
  75   1        int i;
  76   1        if(col_offset <= ledLen) {
  77   2          col_start = 1;
  78   2        } else {
  79   2          col_start = col_offset - ledLen;
  80   2        }
  81   1        col_end = col_offset + 1;
  82   1        col_scan = col_start;
  83   1      
  84   1        for(i = col_start; i < col_end; i++) {
  85   2          
  86   2          // 如果扫描的行大于数组的长度，则重新扫描
  87   2          if (i > arrLen && col_scan == 1)
  88   2          {
  89   3            col_scan = 0;
  90   3          }
  91   2          // 先整体右移 
  92   2          ret = ret << 1;
  93   2          // 如果当前位有值则最后为置1
  94   2          
  95   2          if (get_bit(col_scan, row, arr))
  96   2          {
  97   3            ret = ret | 0x01;
  98   3          }
  99   2          col_scan ++;
 100   2        }
 101   1        return ret;
 102   1      }
 103          
 104          
 105          // 行扫描函数
 106          void sendbyte_h(int index){
 107   1        int i;
 108   1        for(i = 0; i < 16; i++) {
 109   2          shcp_h = 0;
 110   2          if ((16 - index) == i)
 111   2          {
 112   3            ds_h = 0;
 113   3          } else {
 114   3            ds_h = 1;
 115   3          }
 116   2          shcp_h = 1;
C51 COMPILER V9.59.0.0   MAIN                                                              08/29/2018 21:46:13 PAGE 3   

 117   2        }
 118   1        
 119   1      }
 120          
 121          // 列扫描函数
 122          void sendbyte_l(unsigned long show_arr){
 123   1        int j;
 124   1        for(j = 0; j < 24; j++) {
 125   2          shcp_l = 0;
 126   2          ds_l = show_arr & 0x01;
 127   2          show_arr = show_arr >> 1;
 128   2          shcp_l = 1;
 129   2        }
 130   1        
 131   1      
 132   1      }
 133          void show(){
 134   1        shcp = 0;
 135   1        _nop_();
 136   1        shcp = 1;
 137   1      }
 138          
 139          void main() {
 140   1        int i, j;
 141   1        unsigned long show_arr;
 142   1        int size = sizeof(tab) / sizeof(tab[0]); 
 143   1        int delay = 500;
 144   1        while(1){
 145   2          // 行移动，一共有3 * 8个点
 146   2          for (j = 0;j < 24; j++ )
 147   2          {
 148   3            // 列循环，一帧显示数据
 149   3            for(i = 0; i < 16; i++) {
 150   4              show_arr = get_row(j, i, tab, size);
 151   4              sendbyte_l(show_arr);
 152   4              sendbyte_h(i + 1);
 153   4              show();
 154   4            }
 155   3          }
 156   2        }
 157   1      }
 158            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    622    ----
   CONSTANT SIZE    =    128    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      46
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
